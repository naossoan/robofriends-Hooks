{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","robot","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","useState","setRobots","searchfield","setSearchfield","count","setCount","useEffect","fetch","then","response","json","console","log","filteredRobots","filter","toLowerCase","includes","length","width","event","target","value","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wLAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,gBAD3D,IAEE,gCACE,6BAAKL,IACL,4BAAIC,WCiBGK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,8BAIIA,EAAOC,KAAI,SAACC,EAAOC,GACjB,OACE,cAAC,EAAD,CAEER,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKJC,G,KAdG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,8BACE,uBACEV,GAAG,YACHW,KAAK,SACLC,YAAY,gBACZX,UAAU,mCACVY,SAAUH,QCIHI,EAbA,SAAAC,GACb,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,QAHZ,SAMGH,EAAMI,YC2CEC,EA/CH,WAAM,MAOcC,mBAAS,IAPvB,mBAORhB,EAPQ,KAOAiB,EAPA,OAQwBD,mBAAS,IARjC,mBAQRE,EARQ,KAQKC,EARL,OASYH,mBAAS,GATrB,mBASRI,EATQ,KASDC,EATC,KAWhBC,qBAAW,WACTC,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAxB,GAAWiB,EAAWjB,MAC7B2B,QAAQC,IAAIR,KACX,CAACA,IAIJ,IAMMS,EAAiB7B,EAAO8B,QAAO,SAAA5B,GACnC,OAAOA,EAAMT,KAAKsC,cAAcC,SAASd,EAAYa,kBAGrD,OAAQ/B,EAAOiC,OAGb,sBAAKrC,UAAU,KAAf,UACE,qBACEC,IAAI,6EACJqC,MAAM,UAER,cAAC,EAAD,CAAW7B,aAlBM,SAAA8B,GACrBhB,EAAgBgB,EAAMC,OAAOC,UAY3B,IAME,wBAAQC,QAAS,kBAAMjB,EAASD,EAAM,IAAtC,uBANF,IAOE,eAAC,EAAD,WACI,cAAC,EAAD,CAAUpB,OAAQ6B,IADtB,UATF,6CCzBSU,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCEdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,K","file":"static/js/main.38526524.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt='funny robot' /> {/*Use the robohash site to create a random image of the robot based on the ID*/}\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        //robot = each item in the array, i = the index of the item\r\n        //Map through the array of robots obtained from the fetch in App.js and filtered by filteredRobots function and create a new Card based on the values from each entry.\r\n        robots.map((robot, i) => {\r\n          return (\r\n            <Card\r\n              key={i} //unique keys are necessary for each item, so in this case we are just setting the key to the index of the item.\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n            />\r\n          )\r\n        })\r\n\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\nimport '../containers/App.css'\r\n\r\nconst SearchBox = ({ searchChange }) => { //passed in the onSearchChange function from App.js\r\n  return (\r\n    <div>\r\n      <input\r\n        id='searchbox'\r\n        type='search'\r\n        placeholder='search robots'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        onChange={searchChange} //This is what sets the value of 'searchfield' in App.js\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: 'scroll',\r\n        height: '80vh',\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll\r\n","import React, { useState, useEffect } from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n  /*\r\n  Robot and Searchfield \"state\" using array destructuring.\r\n  Basically, when useState runs, it calls setRobots function to update 'robots'\r\n  The default state is whatever is set in the brackets, so in this case it's an empty array for 'robots'\r\n  an empty string for 'searchfield' and a count of 0 for 'count.'\r\n  */\r\n  const [ robots, setRobots ] = useState([])\r\n  const [ searchfield, setSearchfield ] = useState('')\r\n  const [ count, setCount ] = useState(0)\r\n\r\n  useEffect( () => {\r\n    fetch('https://jsonplaceholder.typicode.com/users') //grab the users from this link, convert to json, and set 'robots' to be this list of users.\r\n    .then( response => response.json() )\r\n    .then( robots => {setRobots( robots )} )\r\n    console.log(count)\r\n  }, [count]) //only run useEffect if 'count' changes. (Other than when it runs when the page first loads.)\r\n  //If this secondary argument is left blank, useEffect will continuously run, since its data will be continuously updated, even though it hasn't changed.\r\n  //In order to make useEffect run only once when the App starts, simply put an empty array there.\r\n\r\n  const onSearchChange = event => {\r\n    setSearchfield( event.target.value )\r\n    //When the search box changes, use the event of the search box changes to update the searchfield 'state' to be whatever is typed in the input field.\r\n  }\r\n\r\n  //create a filtered list of robots based on what is typed in the input field\r\n  const filteredRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n  })\r\n\r\n    return !robots.length ? (\r\n      <h1>Loading...</h1>\r\n    ) : (\r\n      <div className='tc'>\r\n        <img\r\n          src='https://fontmeme.com/permalink/201202/2b05458e27d8a5df9a4b631e27c77ef9.png'\r\n          width='400px'\r\n        />\r\n        <SearchBox searchChange={onSearchChange} /> {/* pass onSearchChange function into the SearchBox component so it can be updated */}\r\n        <button onClick={() => setCount(count+1)}>Click Me!</button> {/*Just a demonstration of adding a button that updates 'count' each time it is clicked*/}\r\n        <Scroll>\r\n            <CardList robots={filteredRobots} /> {/*Pass the list of filtered robots to Cardlist to be shown on the page*/}\r\n        </Scroll>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './containers/App' //grab the main app file\r\nimport { robots } from './robots' //grab all the robots from the robots file\r\nimport 'tachyons'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\n//Render the CardList\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}